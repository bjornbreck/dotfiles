# prints the full path to a file, like pwd, for files
# Functions
function _mkd() {
  mkdir -p "$@" && cd "$_";
}
alias mkd=_mkd

function _pwf() {
  dir=$(echo $(cd $(dirname "$1"); pwd))
  base=$(echo $(basename "$1"))
  echo "$dir/$base"
}
alias pwf=_pwf

# function cdf() {
#   THEFILE=$1
#   # For Mac, replace find with mdfind to get it a lot faster. And it does not need args ". -name" part.
#   THEDIR=$(find . -name ${THEFILE} --exclude-dir='node_modules' |head -1 |grep -Eo "/[ /._A-Za-z0-9\-]+/")
#   cd ${THEDIR}
# }


# find . -name package.json |head -1 |grep -Eo "/[ /._A-Za-z0-9\-]+/" --exclude-dir='node_modules'
# find . -type f -name "package.json" | -type -f ! -path "./node_modules/*"
# find . -type f -not -path './.node_modules/*'
# find ! -path '*/.node_modules/*' . -type f -name package.json ! -path 
# find . -name package.json ! -path ./node_modules/*  |head -1 |grep -Eo "/[ /._A-Za-z0-9\-]+/"



# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`â€¦";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}
